@page "/ModifySite/{Id}"
@using RadioControlledDrivingSites.Shared
@using System.Timers

@inject HttpClient httpClient

<div>
	<h3>Muokkaa ajopaikkaa</h3>
</div>

<EditForm Model="site" OnValidSubmit="SubmitForm">
	<DataAnnotationsValidator />
	<div class="container">
		<div class="row p-3 mb-2 bg-info rounded">
			<div class="col" style="font-family: 'Carter One', cursive;">Yleistä tietoa</div>
		</div>
		<div class="row">
			<div class="col-sm-3 p-1">Tätä tietoa käytetään ajopaikan löytämiseksi. Tiedot ovat pakollisia.</div>
			<div class="col-sm-9 inputs mt-2">
				<div class="row mb-2">
					<div class="col-sm-auto label m-1"><label class="form-label" for="name">Nimi</label></div>
					<div class="col-sm"><InputText class="form-control" @bind-Value="site.Name" id="name" /></div>
				</div>
				<div class="row mb-2">
					<div class="col-sm-auto label m-1"><label class="form-label" for="location">Paikka</label></div>
					<div class="col-sm"><InputTextArea class="form-control" @bind-Value="site.Location" id="location" placeholder="Esim. osoite, kaupunginosa, tms."></InputTextArea></div>
				</div>
				<div class="row mb-2">
					<div class="col-sm-auto label m-1"><label class="form-label" data-bs-toggle="tooltip" data-bs-placement="top" for="coordinates">Sijaintitieto</label></div>
					<div class="col-sm"><InputText class="form-control" @bind-Value="site.LongitudeLattitude" id="coorinates" placeholder="Karttalinkkiä varten." /></div>
				</div>
			</div>
		</div>

		<div class="row p-3 mb-2 bg-info mt-3 rounded-3">
			<div class="col" style="font-family: 'Carter One', cursive;">Nippelitietoa</div>
		</div>
		<div class="row p-1">
			<div class="col-sm-3 p-1">Tämä on nippelitietoa, joka ei ole niin pakollista.</div>
			<div class="col-sm-9 inputs">
				<div class="row mb-2">
					<div class="col-sm-auto label mt-2"><label class="form-label" for="description">Kuvaus</label></div>
					<div class="col-sm"><InputTextArea class="form-control" @bind-Value="site.Description" id="description" placeholder="Vapaa kuvaus"></InputTextArea></div>
				</div>
				<div class="row mb-2">
					<div class="col-sm-auto label"><label class="form-label" for="environment">Alusta</label></div>
					<div class="col-sm"><InputText class="form-control" @bind-Value="site.Environment" id="environment" placeholder="Pääasiallinen ajoalusta"></InputText></div>
				</div>
			</div>
		</div>

		<div>
			<div class="btn-group btn-group-lg mt-3">
				@{
					if (buttonsAreActive)
					{
						<input type="submit" class="btn btn-primary btn-lg" value="Lähetä muutokset" />
						<input type="button" @onclick="OnDelete" class="btn btn-danger btn-lg" value="Poista ajopaikka" />
					}
					else
					{
						<input type="submit" class="btn btn-primary btn-lg disabled" value="Lähetä muutokset" disabled />
						<input type="button" @onclick="OnDelete" class="btn btn-danger btn-lg" value="Poista ajopaikka" />
					}
				}
			</div>
		</div>

		@{
			if (wasSuccess == null && showSpinner)
			{
				<div class="spinner-border text-primary mt-3" role="status">
					<span class="visually-hidden">Loading...</span>
				</div>
			}
			<div class="mt-3" style="color: red;">
				<ValidationSummary />
			</div>
			if (wasSuccess == true)
			{
				<div class="alert alert-success mt-3 @fadeAlert" role="alert">@message</div>
			}
			else if (wasSuccess == false)
			{
				<div class="alert alert-danger mt-3 @fadeAlert" role="alert">@message</div>
			}
		}

	</div>
</EditForm>


@code {
	SiteDto site = new SiteDto();
	string message = "";
	bool? wasSuccess = null;
	bool showSpinner = false;
	bool buttonsAreActive = true;
	string fadeAlert = "";
	Timer timer;

	[Parameter]
	public string Id { get; set; }

	private async Task SubmitForm()
	{
		buttonsAreActive = false;
		showSpinner = true;
		var response = await httpClient.PutAsJsonAsync<SiteDto>($"api/Site", site);
		timer = new Timer(5000d);
		timer.AutoReset = false;
		timer.Elapsed += FadeTimerCb;
		wasSuccess = true;
		showSpinner = false;
		if (response.IsSuccessStatusCode)
		{
			message = "Ajopaikkaa on nyt päivitetty! Kiitos!";
		}
		else
		{
			message = $"Voi nakki. Nyt meni metsään. Serveri palautti statuskoodin {response.StatusCode}";
			buttonsAreActive = true;
		}
	}

	void FadeTimerCb(Object o, ElapsedEventArgs e)
	{
		fadeAlert = "fade";
		timer.Enabled = false;
		StateHasChanged();
	}

	private async void OnDelete()
	{
		buttonsAreActive = false;
		showSpinner = true;
		var response = await httpClient.DeleteAsync($"api/Site/{site.Id}");
		showSpinner = false;
		wasSuccess = true;
		timer = new Timer(5000d);
		timer.AutoReset = false;
		timer.Elapsed += (a, b) => { fadeAlert = "fade"; StateHasChanged(); };
		if (response.IsSuccessStatusCode)
		{
			message = "Ajopaikka on nyt poistettu.";
			site = new SiteDto();
		}
		else
		{
			message = "Erhe. Ajopaikkaa ei voitu poistaa jostain syystä.";
		}
		StateHasChanged();
	}

	protected override async Task OnParametersSetAsync()
	{
		var response = await httpClient.GetFromJsonAsync<ServiceResponse<SiteDto>>($"api/Site/{Id}");
		Console.WriteLine("bar");

		if (response.Success)
		{
			Console.WriteLine("FOO");
			site = response.Data;
		}
		else
		{
			message = "Ajopaikan lataamisessa tapahtui jokin erhe.";
		}
	}
}